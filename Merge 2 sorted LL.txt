import java.io.*;
import java.util.*;

class SinglyLinkedListNode {
    int data;
    SinglyLinkedListNode next;
    SinglyLinkedListNode(int nodeData) {
        this.data = nodeData;
        this.next = null;
    }
}

class SinglyLinkedList {
    SinglyLinkedListNode head;
    SinglyLinkedListNode tail;

    public void insertNode(int nodeData) {
        SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);
        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }
        this.tail = node;
    }
}

class Result {
    /*
     * Merge two sorted linked lists
     */
    public static SinglyLinkedListNode mergeLists(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {
        // dummy node to start merged list
        SinglyLinkedListNode dummy = new SinglyLinkedListNode(0);
        SinglyLinkedListNode tail = dummy;

        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                tail.next = head1;
                head1 = head1.next;
            } else {
                tail.next = head2;
                head2 = head2.next;
            }
            tail = tail.next;
        }

        // attach remaining nodes
        if (head1 != null) {
            tail.next = head1;
        } else if (head2 != null) {
            tail.next = head2;
        }

        return dummy.next; // head of merged list
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);

        int tests = scanner.nextInt(); // number of test cases

        for (int t = 0; t < tests; t++) {
            SinglyLinkedList llist1 = new SinglyLinkedList();
            SinglyLinkedList llist2 = new SinglyLinkedList();

            int llist1Count = scanner.nextInt();
            for (int i = 0; i < llist1Count; i++) {
                llist1.insertNode(scanner.nextInt());
            }

            int llist2Count = scanner.nextInt();
            for (int i = 0; i < llist2Count; i++) {
                llist2.insertNode(scanner.nextInt());
            }

            SinglyLinkedListNode mergedHead = Result.mergeLists(llist1.head, llist2.head);

            // print merged list
            SinglyLinkedListNode curr = mergedHead;
            while (curr != null) {
                System.out.print(curr.data + " ");
                curr = curr.next;
            }
            System.out.println();
        }

        scanner.close();
    }
}
