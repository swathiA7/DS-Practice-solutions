import java.io.*;
import java.util.*;

class SinglyLinkedListNode {
    int data;
    SinglyLinkedListNode next;
    SinglyLinkedListNode(int nodeData) {
        this.data = nodeData;
        this.next = null;
    }
}

class SinglyLinkedList {
    SinglyLinkedListNode head;
    SinglyLinkedListNode tail;

    public void insertNode(int nodeData) {
        SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);
        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }
        this.tail = node;
    }
}

class Result {
    /*
     * Complete the 'compareLists' function below.
     * 
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. SinglyLinkedListNode head1
     *  2. SinglyLinkedListNode head2
     */
    public static int compareLists(SinglyLinkedListNode head1, SinglyLinkedListNode head2) {
        while (head1 != null && head2 != null) {
            if (head1.data != head2.data) {
                return 0; // mismatch
            }
            head1 = head1.next;
            head2 = head2.next;
        }
        // both must reach null at the same time
        return (head1 == null && head2 == null) ? 1 : 0;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        Scanner scanner = new Scanner(System.in);

        int tests = scanner.nextInt();

        for (int t = 0; t < tests; t++) {
            SinglyLinkedList llist1 = new SinglyLinkedList();
            SinglyLinkedList llist2 = new SinglyLinkedList();

            int llist1Count = scanner.nextInt();
            for (int i = 0; i < llist1Count; i++) {
                llist1.insertNode(scanner.nextInt());
            }

            int llist2Count = scanner.nextInt();
            for (int i = 0; i < llist2Count; i++) {
                llist2.insertNode(scanner.nextInt());
            }

            int result = Result.compareLists(llist1.head, llist2.head);
            System.out.println(result);
        }
        scanner.close();
    }
}
